// <auto-generated />
using System;
using IncapacidadesWeb.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IncapacidadesWeb.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Cobros", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("FechaCobro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid>("TranscripcionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TranscripcionId");

                    b.ToTable("Cobros");
                });

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Comunicaciones", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DestinatarioId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FechaEnvio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mensaje")
                        .HasColumnType("text");

                    b.Property<Guid>("RemitenteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DestinatarioId");

                    b.HasIndex("RemitenteId");

                    b.ToTable("Comunicaciones");
                });

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Incapacidades", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColaboradorId")
                        .HasColumnType("uuid");

                    b.Property<int>("DiasIncapacidad")
                        .HasColumnType("integer");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TipoIncapacidad")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ColaboradorId");

                    b.ToTable("Incapacidades");
                });

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Notificaciones", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DestinatarioId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaEnvio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mensaje")
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("DestinatarioId");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Pagos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IncapacidadId")
                        .HasColumnType("uuid");

                    b.Property<string>("MetodoPago")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("MontoPagado")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.HasIndex("IncapacidadId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Portal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Portales");
                });

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Transcripciones", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("FechaTranscripcion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IncapacidadId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PortalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IncapacidadId");

                    b.HasIndex("PortalId");

                    b.ToTable("Transcripciones");
                });

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Cargo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Departamento")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Rol")
                        .HasColumnType("integer");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Cobros", b =>
                {
                    b.HasOne("IncapacidadesWeb.Data.Models.Transcripciones", "Transcripcion")
                        .WithMany("Cobros")
                        .HasForeignKey("TranscripcionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transcripcion");
                });

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Comunicaciones", b =>
                {
                    b.HasOne("IncapacidadesWeb.Data.Models.Usuario", "Destinatario")
                        .WithMany("ComunicacionesRecibidas")
                        .HasForeignKey("DestinatarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IncapacidadesWeb.Data.Models.Usuario", "Remitente")
                        .WithMany("ComunicacionesEnviadas")
                        .HasForeignKey("RemitenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Destinatario");

                    b.Navigation("Remitente");
                });

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Incapacidades", b =>
                {
                    b.HasOne("IncapacidadesWeb.Data.Models.Usuario", "Colaborador")
                        .WithMany("Incapacidades")
                        .HasForeignKey("ColaboradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colaborador");
                });

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Notificaciones", b =>
                {
                    b.HasOne("IncapacidadesWeb.Data.Models.Usuario", "Destinatario")
                        .WithMany("NotificacionesRecibidas")
                        .HasForeignKey("DestinatarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destinatario");
                });

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Pagos", b =>
                {
                    b.HasOne("IncapacidadesWeb.Data.Models.Incapacidades", "Incapacidad")
                        .WithMany("Pagos")
                        .HasForeignKey("IncapacidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incapacidad");
                });

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Transcripciones", b =>
                {
                    b.HasOne("IncapacidadesWeb.Data.Models.Incapacidades", "Incapacidad")
                        .WithMany("Transcripciones")
                        .HasForeignKey("IncapacidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IncapacidadesWeb.Data.Models.Portal", "Portal")
                        .WithMany("Transcripciones")
                        .HasForeignKey("PortalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incapacidad");

                    b.Navigation("Portal");
                });

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Incapacidades", b =>
                {
                    b.Navigation("Pagos");

                    b.Navigation("Transcripciones");
                });

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Portal", b =>
                {
                    b.Navigation("Transcripciones");
                });

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Transcripciones", b =>
                {
                    b.Navigation("Cobros");
                });

            modelBuilder.Entity("IncapacidadesWeb.Data.Models.Usuario", b =>
                {
                    b.Navigation("ComunicacionesEnviadas");

                    b.Navigation("ComunicacionesRecibidas");

                    b.Navigation("Incapacidades");

                    b.Navigation("NotificacionesRecibidas");
                });
#pragma warning restore 612, 618
        }
    }
}
